/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.starlabs.vista.administracion.geografia;

import cl.starlabs.controladores.PaisJpaController;
import cl.starlabs.controladores.ProvinciaJpaController;
import cl.starlabs.controladores.RegionJpaController;
import cl.starlabs.modelo.Pais;
import cl.starlabs.modelo.Provincia;
import cl.starlabs.modelo.Region;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Victor Manuel Araya
 */
public class AdministradorProvincias extends javax.swing.JFrame {

    Pais pa = null;
    Region re = null;
    Provincia pro = null;
    EntityManagerFactory emf = null;
    
    public AdministradorProvincias() {
        initComponents();
        //centrando ventana
        this.setLocationRelativeTo(null);
        
        //emf
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        
        //seteando valores por defecto
        panelInfo.setEnabled(false);
        lblNombrePais.setEnabled(false);
        lblPais.setEnabled(false);
        lblRegion.setEnabled(false);
        lblNombreRegion.setEnabled(false);
        lblProvincia.setEnabled(false);
        txtNombreProvincia.setEnabled(false);
        btnAccion.setEnabled(false);
        btnCancelar.setEnabled(false);
        slcRegion.setEnabled(false);
        btnBuscar.setEnabled(false);
        btnAgregar.setEnabled(false);
        btnEliminar.setEnabled(false);
        
        //rellenando primer valor
        rellenarPaises();
    }
    
    public void rellenarPaises() {
        slcPais.removeAllItems();
        slcPais.addItem("Seleccione país...");
        for(Pais p : new PaisJpaController(emf).findPaisEntities()) {
            slcPais.addItem(p.getIdPais()+": "+p.getNombre());
        }
        slcPais.requestFocus();
    }
    
    public void rellenarRegiones() {
        if(slcPais.getSelectedItem().toString().compareToIgnoreCase("Seleccione país...") == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un país para continuar...");
            slcPais.requestFocus();
            pa = null;
            slcRegion.removeAllItems();
            slcRegion.setEnabled(false);
        }else{
            pa = new PaisJpaController(emf).findPais(Integer.parseInt(slcPais.getSelectedItem().toString().split(":")[0]));
            //recuperando valores
            if(pa != null) 
            {
                slcRegion.removeAllItems();
                slcRegion.addItem("Seleccione Región...");
                for(Region r : pa.getRegionList()) {
                    slcRegion.addItem(r.getIdRegion()+": "+r.getNombre());
                }
                slcRegion.setEnabled(true);
                slcRegion.requestFocus();
            }
        }
    }
    
    public void rellenarTabla() {
        if(slcRegion.getSelectedItem().toString().compareToIgnoreCase("Seleccione Región...") != 0) {
            DefaultTableModel modelo = new DefaultTableModel(new Object [][] {}, new String [] { "ID", "Provincia" });
            re = new RegionJpaController(emf).findRegion(Integer.parseInt(slcRegion.getSelectedItem().toString().split(":")[0]));
            for(Provincia p : re.getProvinciaList()) {
                Object[] arreglo = new Object[2];
                arreglo[0] = p.getIdProvincia();
                arreglo[1] = p.getNombre();
                modelo.addRow(arreglo);
            }
            tablaResultados.setModel(modelo);
            tablaResultados.getColumnModel().getColumn(0).setPreferredWidth(5);
            tablaResultados.requestFocus();
            btnAgregar.setEnabled(true);
            btnEliminar.setEnabled(true);
        }else{
            btnBuscar.setEnabled(false);
            btnAgregar.setEnabled(false);
            btnEliminar.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelProvincias = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        slcPais = new javax.swing.JComboBox();
        slcRegion = new javax.swing.JComboBox();
        btnBuscar = new javax.swing.JButton();
        panelInfo = new javax.swing.JPanel();
        lblPais = new javax.swing.JLabel();
        lblRegion = new javax.swing.JLabel();
        lblNombrePais = new javax.swing.JLabel();
        lblNombreRegion = new javax.swing.JLabel();
        lblProvincia = new javax.swing.JLabel();
        txtNombreProvincia = new javax.swing.JTextField();
        btnAccion = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SyncPet :: Administrar Provincias");
        setResizable(false);

        panelProvincias.setBorder(javax.swing.BorderFactory.createTitledBorder("Provincias en Sistema"));

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Provincia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaResultadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaResultados);
        if (tablaResultados.getColumnModel().getColumnCount() > 0) {
            tablaResultados.getColumnModel().getColumn(0).setResizable(false);
            tablaResultados.getColumnModel().getColumn(0).setPreferredWidth(25);
        }

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/delete.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/add.png"))); // NOI18N
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        slcPais.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                slcPaisFocusLost(evt);
            }
        });

        slcRegion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                slcRegionItemStateChanged(evt);
            }
        });

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/find.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelProvinciasLayout = new javax.swing.GroupLayout(panelProvincias);
        panelProvincias.setLayout(panelProvinciasLayout);
        panelProvinciasLayout.setHorizontalGroup(
            panelProvinciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(slcPais, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(slcRegion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProvinciasLayout.createSequentialGroup()
                .addGap(0, 72, Short.MAX_VALUE)
                .addGroup(panelProvinciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProvinciasLayout.createSequentialGroup()
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        panelProvinciasLayout.setVerticalGroup(
            panelProvinciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProvinciasLayout.createSequentialGroup()
                .addComponent(slcPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(slcRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(panelProvinciasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        panelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de Provincia"));

        lblPais.setText("País");

        lblRegion.setText("Región");

        lblNombrePais.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombrePais.setText("País no seleccionado");

        lblNombreRegion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNombreRegion.setText("Región no seleccionada");

        lblProvincia.setText("Nombre de Provincia");

        txtNombreProvincia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreProvinciaKeyTyped(evt);
            }
        });

        btnAccion.setText("Actualizar");
        btnAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccionActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombreProvincia)
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelar))
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRegion)
                            .addComponent(lblNombreRegion)
                            .addComponent(lblProvincia)
                            .addGroup(panelInfoLayout.createSequentialGroup()
                                .addComponent(lblPais)
                                .addGap(46, 46, 46)
                                .addComponent(lblNombrePais)))
                        .addGap(0, 63, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPais)
                    .addComponent(lblNombrePais, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRegion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNombreRegion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblProvincia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombreProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccion)
                    .addComponent(btnCancelar))
                .addContainerGap(170, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelProvincias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelProvincias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void slcPaisFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_slcPaisFocusLost
        rellenarRegiones();
    }//GEN-LAST:event_slcPaisFocusLost

    private void slcRegionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_slcRegionItemStateChanged
        if(slcRegion.getSelectedItem().toString().compareToIgnoreCase("Seleccione Región...") != 0) {
            btnBuscar.setEnabled(true);
        }else{
            btnBuscar.setEnabled(false);
        }
    }//GEN-LAST:event_slcRegionItemStateChanged

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        rellenarTabla();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void tablaResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaResultadosMouseClicked
        if(tablaResultados.getSelectedColumn() >= 0) {
            //recuperando valores desde la tabla
            DefaultTableModel modelo = (DefaultTableModel)tablaResultados.getModel();
            //consultando por el valor a cargar, es recuperado desde el valor seleccionado recuperando el ROW ID
            pro = new ProvinciaJpaController(emf).findProvincia(Integer.parseInt(String.valueOf(modelo.getValueAt(tablaResultados.getSelectedRow(), 0))));
            //si el pais no fue encontrado
            if(pro == null) {
                //se informa que el pais no fue encontrado
                JOptionPane.showMessageDialog(null, "Error: La provincia no pudo ser encontrada por el sistema");
            }else{
                //si el pais es encontrado, se definen valores en campos por defecto
                panelInfo.setEnabled(true);
                lblNombrePais.setEnabled(true);
                lblNombrePais.setText(pa.getNombre());
                lblPais.setEnabled(true);
                lblRegion.setEnabled(true);
                lblNombreRegion.setEnabled(true);
                lblNombreRegion.setText(re.getNombre());
                lblProvincia.setEnabled(true);
                txtNombreProvincia.setEnabled(true);
                txtNombreProvincia.setText(pro.getNombre());
                btnAccion.setEnabled(true);
                btnAccion.setText("Actualizar");
                btnCancelar.setEnabled(true);
                btnCancelar.setText("Cancelar");
                slcRegion.setEnabled(false);
                slcPais.setEnabled(false);
                btnBuscar.setEnabled(false);
                btnAgregar.setEnabled(false);
                btnEliminar.setEnabled(true);
                tablaResultados.setEnabled(false);
            }
        }
    }//GEN-LAST:event_tablaResultadosMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
                panelInfo.setEnabled(false);
                lblNombrePais.setEnabled(false);
                lblNombrePais.setText("País no seleccionado");
                lblPais.setEnabled(false);
                lblRegion.setEnabled(false);
                lblNombreRegion.setEnabled(false);
                lblNombreRegion.setText("Región no seleccionada");
                lblProvincia.setEnabled(false);
                txtNombreProvincia.setEnabled(false);
                txtNombreProvincia.setText("");
                btnAccion.setEnabled(false);
                btnAccion.setText("Actualizar");
                btnCancelar.setEnabled(false);
                btnCancelar.setText("Cancelar");
                slcRegion.setEnabled(true);
                slcPais.setEnabled(true);
                btnBuscar.setEnabled(true);
                btnAgregar.setEnabled(true);
                btnEliminar.setEnabled(true);
                tablaResultados.setEnabled(true);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
                panelInfo.setEnabled(true);
                lblNombrePais.setEnabled(true);
                lblNombrePais.setText(pa.getNombre());
                lblPais.setEnabled(true);
                lblRegion.setEnabled(true);
                lblNombreRegion.setEnabled(true);
                lblNombreRegion.setText(re.getNombre());
                lblProvincia.setEnabled(true);
                txtNombreProvincia.setEnabled(true);
                txtNombreProvincia.setText("");
                btnAccion.setEnabled(true);
                btnAccion.setText("Guardar");
                btnCancelar.setEnabled(true);
                btnCancelar.setText("Cancelar");
                slcRegion.setEnabled(false);
                slcPais.setEnabled(false);
                btnBuscar.setEnabled(false);
                btnAgregar.setEnabled(false);
                btnEliminar.setEnabled(false);
                tablaResultados.setEnabled(false);
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        //comprobando si hay elementos seleccionados en la tabla
        if(tablaResultados.getSelectedColumn() >= 0) {
            //recuperando valores desde la tabla
            DefaultTableModel modelo = (DefaultTableModel)tablaResultados.getModel();
            //se consulta si se desea eliminar el valor seleccionado de la tabla
            int opcion = JOptionPane.showConfirmDialog(null, "¿Esta seguro de eliminar "+String.valueOf(modelo.getValueAt(tablaResultados.getSelectedRow(), 1)).toLowerCase()+" del listado de provincias?");
            //si la respuesta es positiva
            if(opcion == 0) {
                try {
                    //se envia el id del pais para destrucción
                    new ProvinciaJpaController(emf).destroy(Integer.parseInt(modelo.getValueAt(tablaResultados.getSelectedRow(), 0).toString()));
                    //se informa al usuario
                    JOptionPane.showMessageDialog(null, "Provincia eliminada");
                    //se rellena la tabla desde 0
                    rellenarTabla();
                    //se setean valores por defecto haciendo clic en el boton cancelar
                    btnCancelarActionPerformed(evt);
                } catch (Exception e) {
                    //si ocurre un error, es informado al usuario
                    JOptionPane.showMessageDialog(null, "Error al eliminar provincia: "+e.getMessage());
                }
            }else{
                btnCancelarActionPerformed(evt);
            }
        }          
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccionActionPerformed
        //se realiza la accion dependiendo del texto del boton
        if(btnAccion.getText().compareToIgnoreCase("guardar") == 0) {
            //si es registrar, se corrobora que el campo de texto de nombre de pais no este vacio
            if(!txtNombreProvincia.getText().isEmpty()) {
                try {
                    //se crea un pais creando un objeto de tipo pais con los valores predeterminados y enviandolo al controlador
                    new ProvinciaJpaController(emf).create(new Provincia(new ProvinciaJpaController(emf).ultimo(), txtNombreProvincia.getText(), re));
                    //si la creacion fue correcta, se informa al usuario
                    JOptionPane.showMessageDialog(null, "Provincia "+txtNombreProvincia.getText()+" ha sido registrada con éxito");
                    //se reestablecen los campos a sus valores por defecto
                    btnCancelarActionPerformed(evt);
                    //se rellena la tabla de paises
                    rellenarTabla();
                } catch (Exception e) {
                    //si ocurre un error, se informa al usuario
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la provincia: "+e.getMessage()); 
                }
            }else{
                //si el campo de texto esta vacío, se informa al usuario y se coloca el cursor para que escriba
                JOptionPane.showMessageDialog(null, "El campo de nombre de provincia esta vacío");
                txtNombreProvincia.requestFocus();
            }
        //si desea actualizar un registro...
        }else if(btnAccion.getText().compareToIgnoreCase("actualizar") == 0) {
            try {
                //se verifica que el campo de texto no este vacio
                if(!txtNombreProvincia.getText().isEmpty()) {
                    //se setea el nombre nuevo desde el campo de texto al objeto pais recuperado
                    pro.setNombre(txtNombreProvincia.getText());
                    //se envia el objeto con el nombre actualizado al controlador
                    new ProvinciaJpaController(emf).edit(pro);
                    //si es actualizado, se informa al usuario
                    JOptionPane.showMessageDialog(null, "La provincia ha sido actualizada");
                    //se reestablecen los campos a sus valores por defecto
                    btnCancelarActionPerformed(evt);
                    //se rellena la tabla de paises nuevamente
                    rellenarTabla();
                }else{
                    //si el campo de texto esta vacio, se informa al usuarioi
                    JOptionPane.showMessageDialog(null, "El campo de nombre de provincia esta vacío");
                    //se coloca el cursor para que escriba en el campo
                    txtNombreProvincia.requestFocus();
                }
            } catch (Exception e) {
                // si ocurre un error, es informado al usuario
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar el país: "+e.getMessage()); 
            }
        }
    }//GEN-LAST:event_btnAccionActionPerformed

    private void txtNombreProvinciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreProvinciaKeyTyped
        if(txtNombreProvincia.getText().length() >= 200) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreProvinciaKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdministradorProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdministradorProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdministradorProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministradorProvincias.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdministradorProvincias().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccion;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNombrePais;
    private javax.swing.JLabel lblNombreRegion;
    private javax.swing.JLabel lblPais;
    private javax.swing.JLabel lblProvincia;
    private javax.swing.JLabel lblRegion;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelProvincias;
    private javax.swing.JComboBox slcPais;
    private javax.swing.JComboBox slcRegion;
    private javax.swing.JTable tablaResultados;
    private javax.swing.JTextField txtNombreProvincia;
    // End of variables declaration//GEN-END:variables
}
