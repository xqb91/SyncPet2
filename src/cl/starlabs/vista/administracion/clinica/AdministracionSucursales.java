/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cl.starlabs.vista.administracion.clinica;

import cl.starlabs.controladores.ClinicaJpaController;
import cl.starlabs.controladores.ComunaJpaController;
import cl.starlabs.controladores.PaisJpaController;
import cl.starlabs.controladores.SucursalJpaController;
import cl.starlabs.modelo.Clinica;
import cl.starlabs.modelo.Comuna;
import cl.starlabs.modelo.Pais;
import cl.starlabs.modelo.Sucursal;
import java.awt.Color;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Victor Manuel Araya
 */
public class AdministracionSucursales extends javax.swing.JFrame {

    EntityManagerFactory emf = null;
    Sucursal su, aux = null;
    
    public AdministracionSucursales() {
        initComponents();
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        
        //deshabilitando elementos
        panelInfo.setEnabled(false);
        lblNombre.setEnabled(false);
        lblDireccion.setEnabled(false);
        lblEmail.setEnabled(false);
        lblTelefono.setEnabled(false);
        lblComuna.setEnabled(false);
        txtNombre.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtEmail.setEnabled(false);
        txtTelefono.setEnabled(false);
        cmbComuna.setEnabled(false);
        btnAccion.setEnabled(false);
        btnCancelar.setEnabled(false);
    }
    
    public AdministracionSucursales(Sucursal su) {
        initComponents();
        this.setLocationRelativeTo(null);
        emf = Persistence.createEntityManagerFactory("SyncPetPU");
        this.su = su;
        this.setTitle("SyncPet :: Admistrador de Sucursales -- "+su.getClinica().getNombreReal()+" --");
        rellenarTabla();
        
        //deshabilitando elementos
        panelInfo.setEnabled(false);
        lblNombre.setEnabled(false);
        lblDireccion.setEnabled(false);
        lblEmail.setEnabled(false);
        lblTelefono.setEnabled(false);
        lblComuna.setEnabled(false);
        txtNombre.setEnabled(false);
        txtDireccion.setEnabled(false);
        txtEmail.setEnabled(false);
        txtTelefono.setEnabled(false);
        cmbComuna.setEnabled(false);
        btnAccion.setEnabled(false);
        btnCancelar.setEnabled(false);
        tablaResultados.setEnabled(true);
        btnAgregar.setEnabled(true);
        btnEliminar.setEnabled(false);
    }
    
    public void rellenarTabla() {
        DefaultTableModel modelo = new DefaultTableModel(new Object [][] { }, new String [] { "ID", "Sucursal" });
        Clinica c = new ClinicaJpaController(emf).findClinica(su.getClinica().getIdClinica());
        for(Sucursal s : c.getSucursalList()) {
          Object[] obj = new Object[2];
          obj[0] = s.getIdSucursal();
          obj[1] = s.getNombre();
          modelo.addRow(obj);
        }
        tablaResultados.setModel(modelo);
    }
    
    public void rellenarComunas() {
        if(cmbComuna.getItemCount() == 1) {
            for(Comuna c : new ComunaJpaController(emf).findComunaEntities()) {
                cmbComuna.addItem(c.getIdComuna()+": "+c.getNombre());
            }
        }else{
            cmbComuna.removeAllItems();
            cmbComuna.addItem("Seleccione...");
            for(Comuna c : new ComunaJpaController(emf).findComunaEntities()) {
                cmbComuna.addItem(c.getIdComuna()+": "+c.getNombre());
            }
        }
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSucursal = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaResultados = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        panelInfo = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblDireccion = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblComuna = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        cmbComuna = new javax.swing.JComboBox<String>();
        btnAccion = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SyncPet :: Administrar Sucursales");
        setResizable(false);

        panelSucursal.setBorder(javax.swing.BorderFactory.createTitledBorder("Sucursales"));

        tablaResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Sucursal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaResultadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaResultados);
        if (tablaResultados.getColumnModel().getColumnCount() > 0) {
            tablaResultados.getColumnModel().getColumn(0).setResizable(false);
            tablaResultados.getColumnModel().getColumn(0).setPreferredWidth(10);
        }

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/add.png"))); // NOI18N
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cl/starlabs/imagenes/iconos/delete.png"))); // NOI18N
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSucursalLayout = new javax.swing.GroupLayout(panelSucursal);
        panelSucursal.setLayout(panelSucursalLayout);
        panelSucursalLayout.setHorizontalGroup(
            panelSucursalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSucursalLayout.createSequentialGroup()
                .addContainerGap(194, Short.MAX_VALUE)
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        panelSucursalLayout.setVerticalGroup(
            panelSucursalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSucursalLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgregar))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSucursalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEliminar))
        );

        panelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de Sucursal"));

        lblNombre.setText("Nombre");

        lblDireccion.setText("Dirección");

        lblEmail.setText("Correo Electrónico");

        lblTelefono.setText("Teléfono");

        lblComuna.setText("Comuna");

        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombreKeyTyped(evt);
            }
        });

        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDireccionKeyTyped(evt);
            }
        });

        txtEmail.setNextFocusableComponent(txtTelefono);
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        txtTelefono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTelefonoFocusLost(evt);
            }
        });
        txtTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTelefonoKeyTyped(evt);
            }
        });

        btnAccion.setText("Guardar");
        btnAccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAccionActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInfoLayout = new javax.swing.GroupLayout(panelInfo);
        panelInfo.setLayout(panelInfoLayout);
        panelInfoLayout.setHorizontalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombre)
                    .addComponent(lblDireccion)
                    .addComponent(lblEmail)
                    .addComponent(lblTelefono)
                    .addComponent(lblComuna))
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addComponent(txtDireccion)))
                    .addGroup(panelInfoLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelInfoLayout.createSequentialGroup()
                                .addComponent(btnAccion, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addComponent(txtEmail)
                            .addComponent(txtTelefono)
                            .addComponent(cmbComuna, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        panelInfoLayout.setVerticalGroup(
            panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDireccion)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefono)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblComuna)
                    .addComponent(cmbComuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAccion)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelSucursal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaResultadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaResultadosMouseClicked
        if(tablaResultados.getSelectedColumn() >= 0) {
            //recuperando valores desde la tabla
            DefaultTableModel modelo = (DefaultTableModel)tablaResultados.getModel();
            //consultando por el valor a cargar, es recuperado desde el valor seleccionado recuperando el ROW ID
            aux = new SucursalJpaController(emf).findSucursal(Integer.parseInt(String.valueOf(modelo.getValueAt(tablaResultados.getSelectedRow(), 0))));
            //si el pais no fue encontrado
            if(aux == null) {
                //se informa que el pais no fue encontrado
                JOptionPane.showMessageDialog(null, "Error: La sucursal no pudo ser encontrada por el sistema");
                aux = null;
            }else{
                //si el pais es encontrado, se definen valores en campos por defecto
                cmbComuna.removeAllItems();
                panelInfo.setEnabled(true);
                lblNombre.setEnabled(true);
                lblDireccion.setEnabled(true);
                lblEmail.setEnabled(true);
                lblTelefono.setEnabled(true);
                lblComuna.setEnabled(true);
                txtNombre.setEnabled(true);
                txtNombre.setText(aux.getNombre());
                txtDireccion.setEnabled(true);
                txtDireccion.setText(aux.getDireccion());
                txtEmail.setEnabled(true);
                txtEmail.setText(aux.getEmail());
                txtTelefono.setEnabled(true);
                txtTelefono.setText(aux.getTelefono()+"");
                cmbComuna.setEnabled(true);
                cmbComuna.addItem(aux.getComuna().getIdComuna()+": "+aux.getComuna().getNombre());
                btnAccion.setEnabled(true);
                btnAccion.setText("Actualizar");
                btnCancelar.setEnabled(true);
                //--------------------------
                tablaResultados.setEnabled(false);
                btnAgregar.setEnabled(false);
                btnEliminar.setEnabled(true);
                rellenarComunas();
            }
        }
    }//GEN-LAST:event_tablaResultadosMouseClicked

    private void txtTelefonoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTelefonoKeyTyped
        char c = evt.getKeyChar();
        if(!Character.isDigit(c) || txtTelefono.getText().length() >= 8) {
            evt.consume();
        }
    }//GEN-LAST:event_txtTelefonoKeyTyped

    private void txtTelefonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTelefonoFocusLost
        if(!txtTelefono.getText().isEmpty()) {
            txtTelefono.setText(cl.starlabs.herramientas.HerramientasTelefono.formatearTelefono(txtTelefono.getText()));
        }
    }//GEN-LAST:event_txtTelefonoFocusLost

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        if(!txtEmail.getText().isEmpty()) {
            if(!cl.starlabs.herramientas.HerramientasCorreo.validarEmail(txtEmail.getText())) {
                txtEmail.setForeground(Color.white);
                txtEmail.setBackground(Color.red);
                txtEmail.requestFocus();
            }else{
                txtEmail.setForeground(Color.black);
                txtEmail.setBackground(Color.white);
                cmbComuna.requestFocus();
            }
        }
    }//GEN-LAST:event_txtEmailFocusLost

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //deshabilitando elementos
        cmbComuna.removeAllItems();
        panelInfo.setEnabled(false);
        lblNombre.setEnabled(false);
        lblDireccion.setEnabled(false);
        lblEmail.setEnabled(false);
        lblTelefono.setEnabled(false);
        lblComuna.setEnabled(false);
        txtNombre.setEnabled(false);
        txtNombre.setText("");
        txtDireccion.setEnabled(false);
        txtDireccion.setText("");
        txtEmail.setEnabled(false);
        txtEmail.setText("");
        txtTelefono.setEnabled(false);
        txtTelefono.setText("");
        cmbComuna.setEnabled(false);
        cmbComuna.addItem("");
        btnAccion.setEnabled(false);
        btnAccion.setText("Guardar");
        btnCancelar.setEnabled(false);
        //--------------------------
        tablaResultados.setEnabled(true);
        btnAgregar.setEnabled(true);
        btnEliminar.setEnabled(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
                cmbComuna.removeAllItems();
        panelInfo.setEnabled(true);
        lblNombre.setEnabled(true);
        lblDireccion.setEnabled(true);
        lblEmail.setEnabled(true);
        lblTelefono.setEnabled(true);
        lblComuna.setEnabled(true);
        txtNombre.setEnabled(true);
        txtNombre.setText("");
        txtDireccion.setEnabled(true);
        txtDireccion.setText("");
        txtEmail.setEnabled(true);
        txtEmail.setText("");
        txtTelefono.setEnabled(true);
        txtTelefono.setText("");
        cmbComuna.setEnabled(true);
        cmbComuna.addItem("");
        btnAccion.setEnabled(true);
        btnAccion.setText("Guardar");
        btnCancelar.setEnabled(true);
        //--------------------------
        tablaResultados.setEnabled(false);
        btnAgregar.setEnabled(false);
        btnEliminar.setEnabled(false);
        rellenarComunas();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnAccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAccionActionPerformed
        //se realiza la accion dependiendo del texto del boton
        if(btnAccion.getText().compareToIgnoreCase("guardar") == 0) {
            //si es registrar, se corrobora que el campo de texto de nombre de pais no este vacio
            if(!txtNombre.getText().isEmpty()) {
                if(!txtDireccion.getText().isEmpty()) {
                    if(!txtEmail.getText().isEmpty()) {
                        if(!txtTelefono.getText().isEmpty()) {
                            if((cmbComuna.getSelectedItem().toString().compareToIgnoreCase("") == 0) || (cmbComuna.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") == 0)) {
                                JOptionPane.showMessageDialog(null, "Debe seleccionar la comuna");
                                txtTelefono.requestFocus();
                            }else{
                                try {
                                    //se crea un pais creando un objeto de tipo pais con los valores predeterminados y enviandolo al controlador
                                    new SucursalJpaController(emf).create(new Sucursal(new SucursalJpaController(emf).ultimo(), txtNombre.getText(), txtDireccion.getText(), txtEmail.getText(), Integer.parseInt(txtTelefono.getText().replace("+56", "")), su.getClinica(), new ComunaJpaController(emf).findComuna(Integer.parseInt((cmbComuna.getSelectedItem().toString().split(":")[0])))));
                                    //si la creacion fue correcta, se informa al usuario
                                    JOptionPane.showMessageDialog(null, "Sucursal "+txtNombre.getText()+" ha sido registrada con éxito");
                                    //se reestablecen los campos a sus valores por defecto
                                    btnCancelarActionPerformed(evt);
                                    //se rellena la tabla de paises
                                    rellenarTabla();
                                } catch (Exception e) {
                                    //si ocurre un error, se informa al usuario
                                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar la sucursal: "+e.getMessage()); 
                                } 
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "El campo de teléfono esta vacío");
                            txtTelefono.requestFocus();
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "El campo de correo electrónico esta vacío");
                        txtEmail.requestFocus();
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "El campo de dirección esta vacío");
                    txtDireccion.requestFocus();
                }
            }else{
                //si el campo de texto esta vacío, se informa al usuario y se coloca el cursor para que escriba
                JOptionPane.showMessageDialog(null, "El campo de nombre de sucursal esta vacío");
                txtNombre.requestFocus();
            }
        //si desea actualizar un registro...
        }else if(btnAccion.getText().compareToIgnoreCase("actualizar") == 0) {
            try {
                //se verifica que el campo de texto no este vacio
                if(!txtNombre.getText().isEmpty()) {
                    if(!txtDireccion.getText().isEmpty()) {
                        if(!txtEmail.getText().isEmpty()) {
                            if(!txtTelefono.getText().isEmpty()) {
                                if(cmbComuna.getSelectedItem().toString().compareToIgnoreCase("") != 0 || cmbComuna.getSelectedItem().toString().compareToIgnoreCase("Seleccione...") != 0) {
                                    //se setea el nombre nuevo desde el campo de texto al objeto pais recuperado
                                    aux.setNombre(txtNombre.getText());
                                    aux.setDireccion(txtDireccion.getText());
                                    aux.setEmail(txtEmail.getText());
                                    aux.setTelefono(Integer.parseInt(txtTelefono.getText().replace("+56", "")));
                                    aux.setComuna(new ComunaJpaController(emf).findComuna(Integer.parseInt(cmbComuna.getSelectedItem().toString().split(":")[0])));
                                    //se envia el objeto con el nombre actualizado al controlador
                                    new SucursalJpaController(emf).edit(aux);
                                    //si es actualizado, se informa al usuario
                                    JOptionPane.showMessageDialog(null, "La sucursal ha sido actualizada");
                                    //se reestablecen los campos a sus valores por defecto
                                    btnCancelarActionPerformed(evt);
                                    //se rellena la tabla de paises nuevamente
                                    rellenarTabla();
                                }else{
                                    JOptionPane.showMessageDialog(null, "El campo de comuna de sucursal no es seleccionado");
                                    txtTelefono.requestFocus();
                                }
                            }else{
                                JOptionPane.showMessageDialog(null, "El campo de teléfono de sucursal esta vacío");
                                txtTelefono.requestFocus();
                            }
                        }else{
                            JOptionPane.showMessageDialog(null, "El campo de dirección de correo electrónico de sucursal esta vacío");
                            txtEmail.requestFocus();
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "El campo de dirección de sucursal esta vacío");
                        txtDireccion.requestFocus();
                    }
                }else{
                    //si el campo de texto esta vacio, se informa al usuarioi
                    JOptionPane.showMessageDialog(null, "El campo de nombre de sucursal esta vacío");
                    //se coloca el cursor para que escriba en el campo
                    txtNombre.requestFocus();
                }
            } catch (Exception e) {
                // si ocurre un error, es informado al usuario
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error al intentar registrar el país: "+e.getMessage()); 
            }
        }

    }//GEN-LAST:event_btnAccionActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        //comprobando si hay elementos seleccionados en la tabla
        if(tablaResultados.getSelectedColumn() >= 0) {
            //recuperando valores desde la tabla
            DefaultTableModel modelo = (DefaultTableModel)tablaResultados.getModel();
            //se consulta si se desea eliminar el valor seleccionado de la tabla
            int opcion = JOptionPane.showConfirmDialog(null, "¿Esta seguro de eliminar la sucursal "+String.valueOf(modelo.getValueAt(tablaResultados.getSelectedRow(), 1)).toLowerCase()+"?");
            //si la respuesta es positiva
            if(opcion == 0) {
                try {
                    //se envia el id del pais para destrucción
                    new SucursalJpaController(emf).destroy(Integer.parseInt(modelo.getValueAt(tablaResultados.getSelectedRow(), 0).toString()));
                    //se informa al usuario
                    JOptionPane.showMessageDialog(null, "Sucursal eliminada");
                    //se rellena la tabla desde 0
                    rellenarTabla();
                    //se setean valores por defecto haciendo clic en el boton cancelar
                    btnCancelarActionPerformed(evt);
                } catch (Exception e) {
                    //si ocurre un error, es informado al usuario
                    JOptionPane.showMessageDialog(null, "Error al eliminar sucursal: "+e.getMessage());
                }
            }
        } 
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyTyped
        if(txtNombre.getText().length() >= 250) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNombreKeyTyped

    private void txtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDireccionKeyTyped
        if(txtDireccion.getText().length() >= 250) {
            evt.consume();
        }
    }//GEN-LAST:event_txtDireccionKeyTyped

    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailKeyTyped

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdministracionSucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdministracionSucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdministracionSucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdministracionSucursales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdministracionSucursales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccion;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JComboBox<String> cmbComuna;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblComuna;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JPanel panelSucursal;
    private javax.swing.JTable tablaResultados;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
